def int01(a, b, c, d, x, y, start, end):
    output = (
        a**3 * c**3 * end**7 / 28
        - a**3 * c**3 * start**7 / 28
        + a**2
        * c**2
        * end**6
        * (a * (3 * d - 3 * y + 5) + c * (3 * b - 3 * x + 5))
        / 24
        - a**2
        * c**2
        * start**6
        * (a * (3 * d - 3 * y + 5) + c * (3 * b - 3 * x + 5))
        / 24
        + a
        * c
        * end**5
        * (
            a**2 * (d - y + 2) * (3 * d - 3 * y + 4)
            + a * c * (3 * b - 3 * x + 5) * (3 * d - 3 * y + 5)
            + c**2 * (b - x + 2) * (3 * b - 3 * x + 4)
        )
        / 20
        - a
        * c
        * start**5
        * (
            a**2 * (d - y + 2) * (3 * d - 3 * y + 4)
            + a * c * (3 * b - 3 * x + 5) * (3 * d - 3 * y + 5)
            + c**2 * (b - x + 2) * (3 * b - 3 * x + 4)
        )
        / 20
        + end**4
        * (
            a**3 * (d - y + 1) * (d - y + 2) ** 2
            + a**2 * c * (3 * b - 3 * x + 5) * (d - y + 2) * (3 * d - 3 * y + 4)
            + a * c**2 * (b - x + 2) * (3 * b - 3 * x + 4) * (3 * d - 3 * y + 5)
            + c**3 * (b - x + 1) * (b - x + 2) ** 2
        )
        / 16
        + end**3
        * (
            a**2 * (3 * b - 3 * x + 5) * (d - y + 1) * (d - y + 2) ** 2
            + a
            * c
            * (b - x + 2)
            * (3 * b - 3 * x + 4)
            * (d - y + 2)
            * (3 * d - 3 * y + 4)
            + c**2 * (b - x + 1) * (b - x + 2) ** 2 * (3 * d - 3 * y + 5)
        )
        / 12
        + end**2
        * (
            a * (3 * b - 3 * x + 4) * (d - y + 1) * (d - y + 2)
            + c * (b - x + 1) * (b - x + 2) * (3 * d - 3 * y + 4)
        )
        * (b - x + 2)
        * (d - y + 2)
        / 8
        + end * (b - x + 1) * (b - x + 2) ** 2 * (d - y + 1) * (d - y + 2) ** 2 / 4
        - start**4
        * (
            a**3 * (d - y + 1) * (d - y + 2) ** 2
            + a**2 * c * (3 * b - 3 * x + 5) * (d - y + 2) * (3 * d - 3 * y + 4)
            + a * c**2 * (b - x + 2) * (3 * b - 3 * x + 4) * (3 * d - 3 * y + 5)
            + c**3 * (b - x + 1) * (b - x + 2) ** 2
        )
        / 16
        - start**3
        * (
            a**2 * (3 * b - 3 * x + 5) * (d - y + 1) * (d - y + 2) ** 2
            + a
            * c
            * (b - x + 2)
            * (3 * b - 3 * x + 4)
            * (d - y + 2)
            * (3 * d - 3 * y + 4)
            + c**2 * (b - x + 1) * (b - x + 2) ** 2 * (3 * d - 3 * y + 5)
        )
        / 12
        - start**2
        * (
            a * (3 * b - 3 * x + 4) * (d - y + 1) * (d - y + 2)
            + c * (b - x + 1) * (b - x + 2) * (3 * d - 3 * y + 4)
        )
        * (b - x + 2)
        * (d - y + 2)
        / 8
        - start * (b - x + 1) * (b - x + 2) ** 2 * (d - y + 1) * (d - y + 2) ** 2 / 4
    )
    return output


def int02(a, b, c, d, x, y, start, end):
    output = (
        -3 * a**3 * c**3 * end**7 / 28
        + 3 * a**3 * c**3 * start**7 / 28
        - a**2
        * c**2
        * end**6
        * (a * (9 * d - 9 * y + 5) + 3 * c * (3 * b - 3 * x + 5))
        / 24
        + a**2
        * c**2
        * start**6
        * (a * (9 * d - 9 * y + 5) + 3 * c * (3 * b - 3 * x + 5))
        / 24
        - a
        * c
        * end**5
        * (
            a**2 * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a * c * (3 * b - 3 * x + 5) * (9 * d - 9 * y + 5)
            + 3 * c**2 * (3 * b**2 + b * (10 - 6 * x) + 3 * x**2 - 10 * x + 8)
        )
        / 20
        + a
        * c
        * start**5
        * (
            a**2 * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a * c * (3 * b - 3 * x + 5) * (9 * d - 9 * y + 5)
            + 3 * c**2 * (3 * b**2 + b * (10 - 6 * x) + 3 * x**2 - 10 * x + 8)
        )
        / 20
        - end**4
        * (
            a**3
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a**2
            * c
            * (3 * b - 3 * x + 5)
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a
            * c**2
            * (9 * d - 9 * y + 5)
            * (3 * b**2 + b * (10 - 6 * x) + 3 * x**2 - 10 * x + 8)
            + 3 * c**3 * (b - x + 1) * (b - x + 2) ** 2
        )
        / 16
        - end**3
        * (
            a**2
            * (3 * b - 3 * x + 5)
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a
            * c
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            * (3 * b**2 + b * (10 - 6 * x) + 3 * x**2 - 10 * x + 8)
            + c**2 * (b - x + 1) * (b - x + 2) ** 2 * (9 * d - 9 * y + 5)
        )
        / 12
        - end**2
        * (
            a
            * (3 * b - 3 * x + 4)
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + c
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            * (b**2 + b * (3 - 2 * x) + x**2 - 3 * x + 2)
        )
        * (b - x + 2)
        / 8
        - end
        * (b - x + 1)
        * (b - x + 2) ** 2
        * (
            3 * d**3
            + d**2 * (5 - 9 * y)
            + d * y * (9 * y - 10)
            - 3 * y**3
            + 5 * y**2
            - 2
        )
        / 4
        + start**4
        * (
            a**3
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a**2
            * c
            * (3 * b - 3 * x + 5)
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a
            * c**2
            * (9 * d - 9 * y + 5)
            * (3 * b**2 + b * (10 - 6 * x) + 3 * x**2 - 10 * x + 8)
            + 3 * c**3 * (b - x + 1) * (b - x + 2) ** 2
        )
        / 16
        + start**3
        * (
            a**2
            * (3 * b - 3 * x + 5)
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a
            * c
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            * (3 * b**2 + b * (10 - 6 * x) + 3 * x**2 - 10 * x + 8)
            + c**2 * (b - x + 1) * (b - x + 2) ** 2 * (9 * d - 9 * y + 5)
        )
        / 12
        + start**2
        * (
            a
            * (3 * b - 3 * x + 4)
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + c
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            * (b**2 + b * (3 - 2 * x) + x**2 - 3 * x + 2)
        )
        * (b - x + 2)
        / 8
        + start
        * (b - x + 1)
        * (b - x + 2) ** 2
        * (
            3 * d**3
            + d**2 * (5 - 9 * y)
            + d * y * (9 * y - 10)
            - 3 * y**3
            + 5 * y**2
            - 2
        )
        / 4
    )

    return output


def int03(a, b, c, d, x, y, start, end):
    output = (
        end
        * (
            180 * a**3 * c**3 * end**6
            + 70
            * a**2
            * c**2
            * end**5
            * (a * (9 * d - 9 * y - 5) + 3 * c * (3 * b - 3 * x + 5))
            + 84
            * a
            * c
            * end**4
            * (
                a**2 * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                + a * c * (3 * b - 3 * x + 5) * (9 * d - 9 * y - 5)
                + 3 * c**2 * (3 * b**2 + b * (10 - 6 * x) + 3 * x**2 - 10 * x + 8)
            )
            + 105
            * end**3
            * (
                a**3
                * (
                    3 * d**3
                    - d**2 * (9 * y + 5)
                    + d * y * (9 * y + 10)
                    - 3 * y**3
                    - 5 * y**2
                    + 2
                )
                + a**2
                * c
                * (3 * b - 3 * x + 5)
                * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                + a
                * c**2
                * (9 * d - 9 * y - 5)
                * (3 * b**2 + b * (10 - 6 * x) + 3 * x**2 - 10 * x + 8)
                + 3 * c**3 * (b - x + 1) * (b - x + 2) ** 2
            )
            + 140
            * end**2
            * (
                a**2
                * (3 * b - 3 * x + 5)
                * (
                    3 * d**3
                    - d**2 * (9 * y + 5)
                    + d * y * (9 * y + 10)
                    - 3 * y**3
                    - 5 * y**2
                    + 2
                )
                + a
                * c
                * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                * (3 * b**2 + b * (10 - 6 * x) + 3 * x**2 - 10 * x + 8)
                + c**2 * (b - x + 1) * (b - x + 2) ** 2 * (9 * d - 9 * y - 5)
            )
            + 210
            * end
            * (
                a
                * (3 * b - 3 * x + 4)
                * (
                    3 * d**3
                    - d**2 * (9 * y + 5)
                    + d * y * (9 * y + 10)
                    - 3 * y**3
                    - 5 * y**2
                    + 2
                )
                + c
                * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                * (b**2 + b * (3 - 2 * x) + x**2 - 3 * x + 2)
            )
            * (b - x + 2)
            + 420
            * (b - x + 1)
            * (b - x + 2) ** 2
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
        )
        / 1680
        - start
        * (
            180 * a**3 * c**3 * start**6
            + 70
            * a**2
            * c**2
            * start**5
            * (a * (9 * d - 9 * y - 5) + 3 * c * (3 * b - 3 * x + 5))
            + 84
            * a
            * c
            * start**4
            * (
                a**2 * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                + a * c * (3 * b - 3 * x + 5) * (9 * d - 9 * y - 5)
                + 3 * c**2 * (3 * b**2 + b * (10 - 6 * x) + 3 * x**2 - 10 * x + 8)
            )
            + 105
            * start**3
            * (
                a**3
                * (
                    3 * d**3
                    - d**2 * (9 * y + 5)
                    + d * y * (9 * y + 10)
                    - 3 * y**3
                    - 5 * y**2
                    + 2
                )
                + a**2
                * c
                * (3 * b - 3 * x + 5)
                * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                + a
                * c**2
                * (9 * d - 9 * y - 5)
                * (3 * b**2 + b * (10 - 6 * x) + 3 * x**2 - 10 * x + 8)
                + 3 * c**3 * (b - x + 1) * (b - x + 2) ** 2
            )
            + 140
            * start**2
            * (
                a**2
                * (3 * b - 3 * x + 5)
                * (
                    3 * d**3
                    - d**2 * (9 * y + 5)
                    + d * y * (9 * y + 10)
                    - 3 * y**3
                    - 5 * y**2
                    + 2
                )
                + a
                * c
                * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                * (3 * b**2 + b * (10 - 6 * x) + 3 * x**2 - 10 * x + 8)
                + c**2 * (b - x + 1) * (b - x + 2) ** 2 * (9 * d - 9 * y - 5)
            )
            + 210
            * start
            * (
                a
                * (3 * b - 3 * x + 4)
                * (
                    3 * d**3
                    - d**2 * (9 * y + 5)
                    + d * y * (9 * y + 10)
                    - 3 * y**3
                    - 5 * y**2
                    + 2
                )
                + c
                * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                * (b**2 + b * (3 - 2 * x) + x**2 - 3 * x + 2)
            )
            * (b - x + 2)
            + 420
            * (b - x + 1)
            * (b - x + 2) ** 2
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
        )
        / 1680
    )

    return output


def int04(a, b, c, d, x, y, start, end):
    output = (
        -(a**3) * c**3 * end**7 / 28
        + a**3 * c**3 * start**7 / 28
        - a**2
        * c**2
        * end**6
        * (a * (3 * d - 3 * y - 5) + c * (3 * b - 3 * x + 5))
        / 24
        + a**2
        * c**2
        * start**6
        * (a * (3 * d - 3 * y - 5) + c * (3 * b - 3 * x + 5))
        / 24
        - a
        * c
        * end**5
        * (
            a**2 * (d - y - 2) * (3 * d - 3 * y - 4)
            + a * c * (3 * b - 3 * x + 5) * (3 * d - 3 * y - 5)
            + c**2 * (b - x + 2) * (3 * b - 3 * x + 4)
        )
        / 20
        + a
        * c
        * start**5
        * (
            a**2 * (d - y - 2) * (3 * d - 3 * y - 4)
            + a * c * (3 * b - 3 * x + 5) * (3 * d - 3 * y - 5)
            + c**2 * (b - x + 2) * (3 * b - 3 * x + 4)
        )
        / 20
        - end**4
        * (
            a**3 * (-d + y + 2) ** 2 * (d - y - 1)
            + a**2 * c * (3 * b - 3 * x + 5) * (d - y - 2) * (3 * d - 3 * y - 4)
            + a * c**2 * (b - x + 2) * (3 * b - 3 * x + 4) * (3 * d - 3 * y - 5)
            + c**3 * (b - x + 1) * (b - x + 2) ** 2
        )
        / 16
        - end**3
        * (
            a**2 * (3 * b - 3 * x + 5) * (-d + y + 2) ** 2 * (d - y - 1)
            + a
            * c
            * (b - x + 2)
            * (3 * b - 3 * x + 4)
            * (d - y - 2)
            * (3 * d - 3 * y - 4)
            + c**2 * (b - x + 1) * (b - x + 2) ** 2 * (3 * d - 3 * y - 5)
        )
        / 12
        - end**2
        * (
            a * (3 * b - 3 * x + 4) * (d - y - 2) * (d - y - 1)
            + c * (b - x + 1) * (b - x + 2) * (3 * d - 3 * y - 4)
        )
        * (b - x + 2)
        * (d - y - 2)
        / 8
        - end * (b - x + 1) * (b - x + 2) ** 2 * (-d + y + 2) ** 2 * (d - y - 1) / 4
        + start**4
        * (
            a**3 * (-d + y + 2) ** 2 * (d - y - 1)
            + a**2 * c * (3 * b - 3 * x + 5) * (d - y - 2) * (3 * d - 3 * y - 4)
            + a * c**2 * (b - x + 2) * (3 * b - 3 * x + 4) * (3 * d - 3 * y - 5)
            + c**3 * (b - x + 1) * (b - x + 2) ** 2
        )
        / 16
        + start**3
        * (
            a**2 * (3 * b - 3 * x + 5) * (-d + y + 2) ** 2 * (d - y - 1)
            + a
            * c
            * (b - x + 2)
            * (3 * b - 3 * x + 4)
            * (d - y - 2)
            * (3 * d - 3 * y - 4)
            + c**2 * (b - x + 1) * (b - x + 2) ** 2 * (3 * d - 3 * y - 5)
        )
        / 12
        + start**2
        * (
            a * (3 * b - 3 * x + 4) * (d - y - 2) * (d - y - 1)
            + c * (b - x + 1) * (b - x + 2) * (3 * d - 3 * y - 4)
        )
        * (b - x + 2)
        * (d - y - 2)
        / 8
        + start * (b - x + 1) * (b - x + 2) ** 2 * (-d + y + 2) ** 2 * (d - y - 1) / 4
    )

    return output


def int05(a, b, c, d, x, y, start, end):
    output = (
        -3 * a**3 * c**3 * end**7 / 28
        + 3 * a**3 * c**3 * start**7 / 28
        - a**2
        * c**2
        * end**6
        * (3 * a * (3 * d - 3 * y + 5) + c * (9 * b - 9 * x + 5))
        / 24
        + a**2
        * c**2
        * start**6
        * (3 * a * (3 * d - 3 * y + 5) + c * (9 * b - 9 * x + 5))
        / 24
        - a
        * c
        * end**5
        * (
            3 * a**2 * (3 * d**2 + d * (10 - 6 * y) + 3 * y**2 - 10 * y + 8)
            + a * c * (9 * b - 9 * x + 5) * (3 * d - 3 * y + 5)
            + c**2 * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
        )
        / 20
        + a
        * c
        * start**5
        * (
            3 * a**2 * (3 * d**2 + d * (10 - 6 * y) + 3 * y**2 - 10 * y + 8)
            + a * c * (9 * b - 9 * x + 5) * (3 * d - 3 * y + 5)
            + c**2 * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
        )
        / 20
        - end**4
        * (
            3 * a**3 * (d - y + 1) * (d - y + 2) ** 2
            + a**2
            * c
            * (9 * b - 9 * x + 5)
            * (3 * d**2 + d * (10 - 6 * y) + 3 * y**2 - 10 * y + 8)
            + a
            * c**2
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (3 * d - 3 * y + 5)
            + c**3
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 16
        - end**3
        * (
            a**2 * (9 * b - 9 * x + 5) * (d - y + 1) * (d - y + 2) ** 2
            + a
            * c
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (3 * d**2 + d * (10 - 6 * y) + 3 * y**2 - 10 * y + 8)
            + c**2
            * (3 * d - 3 * y + 5)
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 12
        - end**2
        * (
            a
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (d**2 + d * (3 - 2 * y) + y**2 - 3 * y + 2)
            + c
            * (3 * d - 3 * y + 4)
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        * (d - y + 2)
        / 8
        - end
        * (d - y + 1)
        * (d - y + 2) ** 2
        * (
            3 * b**3
            + b**2 * (5 - 9 * x)
            + b * x * (9 * x - 10)
            - 3 * x**3
            + 5 * x**2
            - 2
        )
        / 4
        + start**4
        * (
            3 * a**3 * (d - y + 1) * (d - y + 2) ** 2
            + a**2
            * c
            * (9 * b - 9 * x + 5)
            * (3 * d**2 + d * (10 - 6 * y) + 3 * y**2 - 10 * y + 8)
            + a
            * c**2
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (3 * d - 3 * y + 5)
            + c**3
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 16
        + start**3
        * (
            a**2 * (9 * b - 9 * x + 5) * (d - y + 1) * (d - y + 2) ** 2
            + a
            * c
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (3 * d**2 + d * (10 - 6 * y) + 3 * y**2 - 10 * y + 8)
            + c**2
            * (3 * d - 3 * y + 5)
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 12
        + start**2
        * (
            a
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (d**2 + d * (3 - 2 * y) + y**2 - 3 * y + 2)
            + c
            * (3 * d - 3 * y + 4)
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        * (d - y + 2)
        / 8
        + start
        * (d - y + 1)
        * (d - y + 2) ** 2
        * (
            3 * b**3
            + b**2 * (5 - 9 * x)
            + b * x * (9 * x - 10)
            - 3 * x**3
            + 5 * x**2
            - 2
        )
        / 4
    )

    return output


def int06(a, b, c, d, x, y, start, end):
    output = (
        9 * a**3 * c**3 * end**7 / 28
        - 9 * a**3 * c**3 * start**7 / 28
        + a**2
        * c**2
        * end**6
        * (a * (9 * d - 9 * y + 5) + c * (9 * b - 9 * x + 5))
        / 8
        - a**2
        * c**2
        * start**6
        * (a * (9 * d - 9 * y + 5) + c * (9 * b - 9 * x + 5))
        / 8
        + a
        * c
        * end**5
        * (
            3 * a**2 * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a * c * (9 * b - 9 * x + 5) * (9 * d - 9 * y + 5)
            + 3 * c**2 * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
        )
        / 20
        - a
        * c
        * start**5
        * (
            3 * a**2 * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a * c * (9 * b - 9 * x + 5) * (9 * d - 9 * y + 5)
            + 3 * c**2 * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
        )
        / 20
        + end**4
        * (
            3
            * a**3
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a**2
            * c
            * (9 * b - 9 * x + 5)
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a
            * c**2
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (9 * d - 9 * y + 5)
            + 3
            * c**3
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 16
        + end**3
        * (
            a**2
            * (9 * b - 9 * x + 5)
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a
            * c
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + c**2
            * (9 * d - 9 * y + 5)
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 12
        + end**2
        * (
            a
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + c
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 8
        + end
        * (
            3 * b**3
            + b**2 * (5 - 9 * x)
            + b * x * (9 * x - 10)
            - 3 * x**3
            + 5 * x**2
            - 2
        )
        * (
            3 * d**3
            + d**2 * (5 - 9 * y)
            + d * y * (9 * y - 10)
            - 3 * y**3
            + 5 * y**2
            - 2
        )
        / 4
        - start**4
        * (
            3
            * a**3
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a**2
            * c
            * (9 * b - 9 * x + 5)
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a
            * c**2
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (9 * d - 9 * y + 5)
            + 3
            * c**3
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 16
        - start**3
        * (
            a**2
            * (9 * b - 9 * x + 5)
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a
            * c
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + c**2
            * (9 * d - 9 * y + 5)
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 12
        - start**2
        * (
            a
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + c
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 8
        - start
        * (
            3 * b**3
            + b**2 * (5 - 9 * x)
            + b * x * (9 * x - 10)
            - 3 * x**3
            + 5 * x**2
            - 2
        )
        * (
            3 * d**3
            + d**2 * (5 - 9 * y)
            + d * y * (9 * y - 10)
            - 3 * y**3
            + 5 * y**2
            - 2
        )
        / 4
    )

    return output


def int07(a, b, c, d, x, y, start, end):
    output = (
        -9 * a**3 * c**3 * end**7 / 28
        + 9 * a**3 * c**3 * start**7 / 28
        - a**2
        * c**2
        * end**6
        * (a * (9 * d - 9 * y - 5) + c * (9 * b - 9 * x + 5))
        / 8
        + a**2
        * c**2
        * start**6
        * (a * (9 * d - 9 * y - 5) + c * (9 * b - 9 * x + 5))
        / 8
        - a
        * c
        * end**5
        * (
            3 * a**2 * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            + a * c * (9 * b - 9 * x + 5) * (9 * d - 9 * y - 5)
            + 3 * c**2 * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
        )
        / 20
        + a
        * c
        * start**5
        * (
            3 * a**2 * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            + a * c * (9 * b - 9 * x + 5) * (9 * d - 9 * y - 5)
            + 3 * c**2 * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
        )
        / 20
        - end**4
        * (
            3
            * a**3
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
            + a**2
            * c
            * (9 * b - 9 * x + 5)
            * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            + a
            * c**2
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (9 * d - 9 * y - 5)
            + 3
            * c**3
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 16
        - end**3
        * (
            a**2
            * (9 * b - 9 * x + 5)
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
            + a
            * c
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            + c**2
            * (9 * d - 9 * y - 5)
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 12
        - end**2
        * (
            a
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
            + c
            * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 8
        - end
        * (
            3 * b**3
            + b**2 * (5 - 9 * x)
            + b * x * (9 * x - 10)
            - 3 * x**3
            + 5 * x**2
            - 2
        )
        * (
            3 * d**3
            - d**2 * (9 * y + 5)
            + d * y * (9 * y + 10)
            - 3 * y**3
            - 5 * y**2
            + 2
        )
        / 4
        + start**4
        * (
            3
            * a**3
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
            + a**2
            * c
            * (9 * b - 9 * x + 5)
            * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            + a
            * c**2
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (9 * d - 9 * y - 5)
            + 3
            * c**3
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 16
        + start**3
        * (
            a**2
            * (9 * b - 9 * x + 5)
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
            + a
            * c
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            + c**2
            * (9 * d - 9 * y - 5)
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 12
        + start**2
        * (
            a
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
            + c
            * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 8
        + start
        * (
            3 * b**3
            + b**2 * (5 - 9 * x)
            + b * x * (9 * x - 10)
            - 3 * x**3
            + 5 * x**2
            - 2
        )
        * (
            3 * d**3
            - d**2 * (9 * y + 5)
            + d * y * (9 * y + 10)
            - 3 * y**3
            - 5 * y**2
            + 2
        )
        / 4
    )

    return output


def int08(a, b, c, d, x, y, start, end):
    output = (
        3 * a**3 * c**3 * end**7 / 28
        - 3 * a**3 * c**3 * start**7 / 28
        + a**2
        * c**2
        * end**6
        * (3 * a * (3 * d - 3 * y - 5) + c * (9 * b - 9 * x + 5))
        / 24
        - a**2
        * c**2
        * start**6
        * (3 * a * (3 * d - 3 * y - 5) + c * (9 * b - 9 * x + 5))
        / 24
        + a
        * c
        * end**5
        * (
            3 * a**2 * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
            + a * c * (9 * b - 9 * x + 5) * (3 * d - 3 * y - 5)
            + c**2 * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
        )
        / 20
        - a
        * c
        * start**5
        * (
            3 * a**2 * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
            + a * c * (9 * b - 9 * x + 5) * (3 * d - 3 * y - 5)
            + c**2 * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
        )
        / 20
        + end**4
        * (
            3 * a**3 * (-d + y + 2) ** 2 * (d - y - 1)
            + a**2
            * c
            * (9 * b - 9 * x + 5)
            * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
            + a
            * c**2
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (3 * d - 3 * y - 5)
            + c**3
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 16
        + end**3
        * (
            a**2 * (9 * b - 9 * x + 5) * (-d + y + 2) ** 2 * (d - y - 1)
            + a
            * c
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
            + c**2
            * (3 * d - 3 * y - 5)
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 12
        + end**2
        * (
            a
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (d**2 - d * (2 * y + 3) + y**2 + 3 * y + 2)
            + c
            * (3 * d - 3 * y - 4)
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        * (d - y - 2)
        / 8
        + end
        * (-d + y + 2) ** 2
        * (d - y - 1)
        * (
            3 * b**3
            + b**2 * (5 - 9 * x)
            + b * x * (9 * x - 10)
            - 3 * x**3
            + 5 * x**2
            - 2
        )
        / 4
        - start**4
        * (
            3 * a**3 * (-d + y + 2) ** 2 * (d - y - 1)
            + a**2
            * c
            * (9 * b - 9 * x + 5)
            * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
            + a
            * c**2
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (3 * d - 3 * y - 5)
            + c**3
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 16
        - start**3
        * (
            a**2 * (9 * b - 9 * x + 5) * (-d + y + 2) ** 2 * (d - y - 1)
            + a
            * c
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
            + c**2
            * (3 * d - 3 * y - 5)
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        / 12
        - start**2
        * (
            a
            * (9 * b**2 - 2 * b * (9 * x - 5) + x * (9 * x - 10))
            * (d**2 - d * (2 * y + 3) + y**2 + 3 * y + 2)
            + c
            * (3 * d - 3 * y - 4)
            * (
                3 * b**3
                + b**2 * (5 - 9 * x)
                + b * x * (9 * x - 10)
                - 3 * x**3
                + 5 * x**2
                - 2
            )
        )
        * (d - y - 2)
        / 8
        - start
        * (-d + y + 2) ** 2
        * (d - y - 1)
        * (
            3 * b**3
            + b**2 * (5 - 9 * x)
            + b * x * (9 * x - 10)
            - 3 * x**3
            + 5 * x**2
            - 2
        )
        / 4
    )

    return output


def int09(a, b, c, d, x, y, start, end):
    output = (
        end
        * (
            180 * a**3 * c**3 * end**6
            + 70
            * a**2
            * c**2
            * end**5
            * (3 * a * (3 * d - 3 * y + 5) + c * (9 * b - 9 * x - 5))
            + 84
            * a
            * c
            * end**4
            * (
                3 * a**2 * (3 * d**2 + d * (10 - 6 * y) + 3 * y**2 - 10 * y + 8)
                + a * c * (9 * b - 9 * x - 5) * (3 * d - 3 * y + 5)
                + c**2 * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            )
            + 105
            * end**3
            * (
                3 * a**3 * (d - y + 1) * (d - y + 2) ** 2
                + a**2
                * c
                * (9 * b - 9 * x - 5)
                * (3 * d**2 + d * (10 - 6 * y) + 3 * y**2 - 10 * y + 8)
                + a
                * c**2
                * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
                * (3 * d - 3 * y + 5)
                + c**3
                * (
                    3 * b**3
                    - b**2 * (9 * x + 5)
                    + b * x * (9 * x + 10)
                    - 3 * x**3
                    - 5 * x**2
                    + 2
                )
            )
            + 140
            * end**2
            * (
                a**2 * (9 * b - 9 * x - 5) * (d - y + 1) * (d - y + 2) ** 2
                + a
                * c
                * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
                * (3 * d**2 + d * (10 - 6 * y) + 3 * y**2 - 10 * y + 8)
                + c**2
                * (3 * d - 3 * y + 5)
                * (
                    3 * b**3
                    - b**2 * (9 * x + 5)
                    + b * x * (9 * x + 10)
                    - 3 * x**3
                    - 5 * x**2
                    + 2
                )
            )
            + 210
            * end
            * (
                a
                * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
                * (d**2 + d * (3 - 2 * y) + y**2 - 3 * y + 2)
                + c
                * (3 * d - 3 * y + 4)
                * (
                    3 * b**3
                    - b**2 * (9 * x + 5)
                    + b * x * (9 * x + 10)
                    - 3 * x**3
                    - 5 * x**2
                    + 2
                )
            )
            * (d - y + 2)
            + 420
            * (d - y + 1)
            * (d - y + 2) ** 2
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 1680
        - start
        * (
            180 * a**3 * c**3 * start**6
            + 70
            * a**2
            * c**2
            * start**5
            * (3 * a * (3 * d - 3 * y + 5) + c * (9 * b - 9 * x - 5))
            + 84
            * a
            * c
            * start**4
            * (
                3 * a**2 * (3 * d**2 + d * (10 - 6 * y) + 3 * y**2 - 10 * y + 8)
                + a * c * (9 * b - 9 * x - 5) * (3 * d - 3 * y + 5)
                + c**2 * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            )
            + 105
            * start**3
            * (
                3 * a**3 * (d - y + 1) * (d - y + 2) ** 2
                + a**2
                * c
                * (9 * b - 9 * x - 5)
                * (3 * d**2 + d * (10 - 6 * y) + 3 * y**2 - 10 * y + 8)
                + a
                * c**2
                * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
                * (3 * d - 3 * y + 5)
                + c**3
                * (
                    3 * b**3
                    - b**2 * (9 * x + 5)
                    + b * x * (9 * x + 10)
                    - 3 * x**3
                    - 5 * x**2
                    + 2
                )
            )
            + 140
            * start**2
            * (
                a**2 * (9 * b - 9 * x - 5) * (d - y + 1) * (d - y + 2) ** 2
                + a
                * c
                * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
                * (3 * d**2 + d * (10 - 6 * y) + 3 * y**2 - 10 * y + 8)
                + c**2
                * (3 * d - 3 * y + 5)
                * (
                    3 * b**3
                    - b**2 * (9 * x + 5)
                    + b * x * (9 * x + 10)
                    - 3 * x**3
                    - 5 * x**2
                    + 2
                )
            )
            + 210
            * start
            * (
                a
                * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
                * (d**2 + d * (3 - 2 * y) + y**2 - 3 * y + 2)
                + c
                * (3 * d - 3 * y + 4)
                * (
                    3 * b**3
                    - b**2 * (9 * x + 5)
                    + b * x * (9 * x + 10)
                    - 3 * x**3
                    - 5 * x**2
                    + 2
                )
            )
            * (d - y + 2)
            + 420
            * (d - y + 1)
            * (d - y + 2) ** 2
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 1680
    )

    return output


def int10(a, b, c, d, x, y, start, end):
    output = (
        -9 * a**3 * c**3 * end**7 / 28
        + 9 * a**3 * c**3 * start**7 / 28
        - a**2
        * c**2
        * end**6
        * (a * (9 * d - 9 * y + 5) + c * (9 * b - 9 * x - 5))
        / 8
        + a**2
        * c**2
        * start**6
        * (a * (9 * d - 9 * y + 5) + c * (9 * b - 9 * x - 5))
        / 8
        - a
        * c
        * end**5
        * (
            3 * a**2 * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a * c * (9 * b - 9 * x - 5) * (9 * d - 9 * y + 5)
            + 3 * c**2 * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
        )
        / 20
        + a
        * c
        * start**5
        * (
            3 * a**2 * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a * c * (9 * b - 9 * x - 5) * (9 * d - 9 * y + 5)
            + 3 * c**2 * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
        )
        / 20
        - end**4
        * (
            3
            * a**3
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a**2
            * c
            * (9 * b - 9 * x - 5)
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a
            * c**2
            * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            * (9 * d - 9 * y + 5)
            + 3
            * c**3
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 16
        - end**3
        * (
            a**2
            * (9 * b - 9 * x - 5)
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a
            * c
            * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + c**2
            * (9 * d - 9 * y + 5)
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 12
        - end**2
        * (
            a
            * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + c
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 8
        - end
        * (
            3 * b**3
            - b**2 * (9 * x + 5)
            + b * x * (9 * x + 10)
            - 3 * x**3
            - 5 * x**2
            + 2
        )
        * (
            3 * d**3
            + d**2 * (5 - 9 * y)
            + d * y * (9 * y - 10)
            - 3 * y**3
            + 5 * y**2
            - 2
        )
        / 4
        + start**4
        * (
            3
            * a**3
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a**2
            * c
            * (9 * b - 9 * x - 5)
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a
            * c**2
            * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            * (9 * d - 9 * y + 5)
            + 3
            * c**3
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 16
        + start**3
        * (
            a**2
            * (9 * b - 9 * x - 5)
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a
            * c
            * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + c**2
            * (9 * d - 9 * y + 5)
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 12
        + start**2
        * (
            a
            * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + c
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 8
        + start
        * (
            3 * b**3
            - b**2 * (9 * x + 5)
            + b * x * (9 * x + 10)
            - 3 * x**3
            - 5 * x**2
            + 2
        )
        * (
            3 * d**3
            + d**2 * (5 - 9 * y)
            + d * y * (9 * y - 10)
            - 3 * y**3
            + 5 * y**2
            - 2
        )
        / 4
    )

    return output


def int11(a, b, c, d, x, y, start, end):
    output = (
        9 * a**3 * c**3 * end**7 / 28
        - 9 * a**3 * c**3 * start**7 / 28
        + a**2
        * c**2
        * end**6
        * (a * (9 * d - 9 * y - 5) + c * (9 * b - 9 * x - 5))
        / 8
        - a**2
        * c**2
        * start**6
        * (a * (9 * d - 9 * y - 5) + c * (9 * b - 9 * x - 5))
        / 8
        + a
        * c
        * end**5
        * (
            3 * a**2 * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            + a * c * (9 * b - 9 * x - 5) * (9 * d - 9 * y - 5)
            + 3 * c**2 * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
        )
        / 20
        - a
        * c
        * start**5
        * (
            3 * a**2 * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            + a * c * (9 * b - 9 * x - 5) * (9 * d - 9 * y - 5)
            + 3 * c**2 * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
        )
        / 20
        + end**4
        * (
            3
            * a**3
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
            + a**2
            * c
            * (9 * b - 9 * x - 5)
            * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            + a
            * c**2
            * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            * (9 * d - 9 * y - 5)
            + 3
            * c**3
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 16
        + end**3
        * (
            a**2
            * (9 * b - 9 * x - 5)
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
            + a
            * c
            * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            + c**2
            * (9 * d - 9 * y - 5)
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 12
        + end**2
        * (
            a
            * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
            + c
            * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 8
        + end
        * (
            3 * b**3
            - b**2 * (9 * x + 5)
            + b * x * (9 * x + 10)
            - 3 * x**3
            - 5 * x**2
            + 2
        )
        * (
            3 * d**3
            - d**2 * (9 * y + 5)
            + d * y * (9 * y + 10)
            - 3 * y**3
            - 5 * y**2
            + 2
        )
        / 4
        - start**4
        * (
            3
            * a**3
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
            + a**2
            * c
            * (9 * b - 9 * x - 5)
            * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            + a
            * c**2
            * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            * (9 * d - 9 * y - 5)
            + 3
            * c**3
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 16
        - start**3
        * (
            a**2
            * (9 * b - 9 * x - 5)
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
            + a
            * c
            * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            + c**2
            * (9 * d - 9 * y - 5)
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 12
        - start**2
        * (
            a
            * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
            + c
            * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 8
        - start
        * (
            3 * b**3
            - b**2 * (9 * x + 5)
            + b * x * (9 * x + 10)
            - 3 * x**3
            - 5 * x**2
            + 2
        )
        * (
            3 * d**3
            - d**2 * (9 * y + 5)
            + d * y * (9 * y + 10)
            - 3 * y**3
            - 5 * y**2
            + 2
        )
        / 4
    )

    return output


def int12(a, b, c, d, x, y, start, end):
    output = (
        -end
        * (
            180 * a**3 * c**3 * end**6
            + 70
            * a**2
            * c**2
            * end**5
            * (3 * a * (3 * d - 3 * y - 5) + c * (9 * b - 9 * x - 5))
            + 84
            * a
            * c
            * end**4
            * (
                3
                * a**2
                * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
                + a * c * (9 * b - 9 * x - 5) * (3 * d - 3 * y - 5)
                + c**2 * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            )
            + 105
            * end**3
            * (
                3 * a**3 * (-d + y + 2) ** 2 * (d - y - 1)
                + a**2
                * c
                * (9 * b - 9 * x - 5)
                * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
                + a
                * c**2
                * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
                * (3 * d - 3 * y - 5)
                + c**3
                * (
                    3 * b**3
                    - b**2 * (9 * x + 5)
                    + b * x * (9 * x + 10)
                    - 3 * x**3
                    - 5 * x**2
                    + 2
                )
            )
            + 140
            * end**2
            * (
                a**2 * (9 * b - 9 * x - 5) * (-d + y + 2) ** 2 * (d - y - 1)
                + a
                * c
                * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
                * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
                + c**2
                * (3 * d - 3 * y - 5)
                * (
                    3 * b**3
                    - b**2 * (9 * x + 5)
                    + b * x * (9 * x + 10)
                    - 3 * x**3
                    - 5 * x**2
                    + 2
                )
            )
            + 210
            * end
            * (
                a
                * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
                * (d**2 - d * (2 * y + 3) + y**2 + 3 * y + 2)
                + c
                * (3 * d - 3 * y - 4)
                * (
                    3 * b**3
                    - b**2 * (9 * x + 5)
                    + b * x * (9 * x + 10)
                    - 3 * x**3
                    - 5 * x**2
                    + 2
                )
            )
            * (d - y - 2)
            + 420
            * (-d + y + 2) ** 2
            * (d - y - 1)
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 1680
        + start
        * (
            180 * a**3 * c**3 * start**6
            + 70
            * a**2
            * c**2
            * start**5
            * (3 * a * (3 * d - 3 * y - 5) + c * (9 * b - 9 * x - 5))
            + 84
            * a
            * c
            * start**4
            * (
                3
                * a**2
                * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
                + a * c * (9 * b - 9 * x - 5) * (3 * d - 3 * y - 5)
                + c**2 * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
            )
            + 105
            * start**3
            * (
                3 * a**3 * (-d + y + 2) ** 2 * (d - y - 1)
                + a**2
                * c
                * (9 * b - 9 * x - 5)
                * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
                + a
                * c**2
                * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
                * (3 * d - 3 * y - 5)
                + c**3
                * (
                    3 * b**3
                    - b**2 * (9 * x + 5)
                    + b * x * (9 * x + 10)
                    - 3 * x**3
                    - 5 * x**2
                    + 2
                )
            )
            + 140
            * start**2
            * (
                a**2 * (9 * b - 9 * x - 5) * (-d + y + 2) ** 2 * (d - y - 1)
                + a
                * c
                * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
                * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
                + c**2
                * (3 * d - 3 * y - 5)
                * (
                    3 * b**3
                    - b**2 * (9 * x + 5)
                    + b * x * (9 * x + 10)
                    - 3 * x**3
                    - 5 * x**2
                    + 2
                )
            )
            + 210
            * start
            * (
                a
                * (9 * b**2 - 2 * b * (9 * x + 5) + x * (9 * x + 10))
                * (d**2 - d * (2 * y + 3) + y**2 + 3 * y + 2)
                + c
                * (3 * d - 3 * y - 4)
                * (
                    3 * b**3
                    - b**2 * (9 * x + 5)
                    + b * x * (9 * x + 10)
                    - 3 * x**3
                    - 5 * x**2
                    + 2
                )
            )
            * (d - y - 2)
            + 420
            * (-d + y + 2) ** 2
            * (d - y - 1)
            * (
                3 * b**3
                - b**2 * (9 * x + 5)
                + b * x * (9 * x + 10)
                - 3 * x**3
                - 5 * x**2
                + 2
            )
        )
        / 1680
    )

    return output


def int13(a, b, c, d, x, y, start, end):
    output = (
        -(a**3) * c**3 * end**7 / 28
        + a**3 * c**3 * start**7 / 28
        - a**2
        * c**2
        * end**6
        * (a * (3 * d - 3 * y + 5) + c * (3 * b - 3 * x - 5))
        / 24
        + a**2
        * c**2
        * start**6
        * (a * (3 * d - 3 * y + 5) + c * (3 * b - 3 * x - 5))
        / 24
        - a
        * c
        * end**5
        * (
            a**2 * (d - y + 2) * (3 * d - 3 * y + 4)
            + a * c * (3 * b - 3 * x - 5) * (3 * d - 3 * y + 5)
            + c**2 * (b - x - 2) * (3 * b - 3 * x - 4)
        )
        / 20
        + a
        * c
        * start**5
        * (
            a**2 * (d - y + 2) * (3 * d - 3 * y + 4)
            + a * c * (3 * b - 3 * x - 5) * (3 * d - 3 * y + 5)
            + c**2 * (b - x - 2) * (3 * b - 3 * x - 4)
        )
        / 20
        - end**4
        * (
            a**3 * (d - y + 1) * (d - y + 2) ** 2
            + a**2 * c * (3 * b - 3 * x - 5) * (d - y + 2) * (3 * d - 3 * y + 4)
            + a * c**2 * (b - x - 2) * (3 * b - 3 * x - 4) * (3 * d - 3 * y + 5)
            + c**3 * (-b + x + 2) ** 2 * (b - x - 1)
        )
        / 16
        - end**3
        * (
            a**2 * (3 * b - 3 * x - 5) * (d - y + 1) * (d - y + 2) ** 2
            + a
            * c
            * (b - x - 2)
            * (3 * b - 3 * x - 4)
            * (d - y + 2)
            * (3 * d - 3 * y + 4)
            + c**2 * (-b + x + 2) ** 2 * (b - x - 1) * (3 * d - 3 * y + 5)
        )
        / 12
        - end**2
        * (
            a * (3 * b - 3 * x - 4) * (d - y + 1) * (d - y + 2)
            + c * (b - x - 2) * (b - x - 1) * (3 * d - 3 * y + 4)
        )
        * (b - x - 2)
        * (d - y + 2)
        / 8
        - end * (-b + x + 2) ** 2 * (b - x - 1) * (d - y + 1) * (d - y + 2) ** 2 / 4
        + start**4
        * (
            a**3 * (d - y + 1) * (d - y + 2) ** 2
            + a**2 * c * (3 * b - 3 * x - 5) * (d - y + 2) * (3 * d - 3 * y + 4)
            + a * c**2 * (b - x - 2) * (3 * b - 3 * x - 4) * (3 * d - 3 * y + 5)
            + c**3 * (-b + x + 2) ** 2 * (b - x - 1)
        )
        / 16
        + start**3
        * (
            a**2 * (3 * b - 3 * x - 5) * (d - y + 1) * (d - y + 2) ** 2
            + a
            * c
            * (b - x - 2)
            * (3 * b - 3 * x - 4)
            * (d - y + 2)
            * (3 * d - 3 * y + 4)
            + c**2 * (-b + x + 2) ** 2 * (b - x - 1) * (3 * d - 3 * y + 5)
        )
        / 12
        + start**2
        * (
            a * (3 * b - 3 * x - 4) * (d - y + 1) * (d - y + 2)
            + c * (b - x - 2) * (b - x - 1) * (3 * d - 3 * y + 4)
        )
        * (b - x - 2)
        * (d - y + 2)
        / 8
        + start * (-b + x + 2) ** 2 * (b - x - 1) * (d - y + 1) * (d - y + 2) ** 2 / 4
    )

    return output


def int14(a, b, c, d, x, y, start, end):
    output = (
        3 * a**3 * c**3 * end**7 / 28
        - 3 * a**3 * c**3 * start**7 / 28
        + a**2
        * c**2
        * end**6
        * (a * (9 * d - 9 * y + 5) + 3 * c * (3 * b - 3 * x - 5))
        / 24
        - a**2
        * c**2
        * start**6
        * (a * (9 * d - 9 * y + 5) + 3 * c * (3 * b - 3 * x - 5))
        / 24
        + a
        * c
        * end**5
        * (
            a**2 * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a * c * (3 * b - 3 * x - 5) * (9 * d - 9 * y + 5)
            + 3 * c**2 * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
        )
        / 20
        - a
        * c
        * start**5
        * (
            a**2 * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a * c * (3 * b - 3 * x - 5) * (9 * d - 9 * y + 5)
            + 3 * c**2 * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
        )
        / 20
        + end**4
        * (
            a**3
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a**2
            * c
            * (3 * b - 3 * x - 5)
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a
            * c**2
            * (9 * d - 9 * y + 5)
            * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
            + 3 * c**3 * (-b + x + 2) ** 2 * (b - x - 1)
        )
        / 16
        + end**3
        * (
            a**2
            * (3 * b - 3 * x - 5)
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a
            * c
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
            + c**2 * (-b + x + 2) ** 2 * (b - x - 1) * (9 * d - 9 * y + 5)
        )
        / 12
        + end**2
        * (
            a
            * (3 * b - 3 * x - 4)
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + c
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            * (b**2 - b * (2 * x + 3) + x**2 + 3 * x + 2)
        )
        * (b - x - 2)
        / 8
        + end
        * (-b + x + 2) ** 2
        * (b - x - 1)
        * (
            3 * d**3
            + d**2 * (5 - 9 * y)
            + d * y * (9 * y - 10)
            - 3 * y**3
            + 5 * y**2
            - 2
        )
        / 4
        - start**4
        * (
            a**3
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a**2
            * c
            * (3 * b - 3 * x - 5)
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            + a
            * c**2
            * (9 * d - 9 * y + 5)
            * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
            + 3 * c**3 * (-b + x + 2) ** 2 * (b - x - 1)
        )
        / 16
        - start**3
        * (
            a**2
            * (3 * b - 3 * x - 5)
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + a
            * c
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
            + c**2 * (-b + x + 2) ** 2 * (b - x - 1) * (9 * d - 9 * y + 5)
        )
        / 12
        - start**2
        * (
            a
            * (3 * b - 3 * x - 4)
            * (
                3 * d**3
                + d**2 * (5 - 9 * y)
                + d * y * (9 * y - 10)
                - 3 * y**3
                + 5 * y**2
                - 2
            )
            + c
            * (9 * d**2 - 2 * d * (9 * y - 5) + y * (9 * y - 10))
            * (b**2 - b * (2 * x + 3) + x**2 + 3 * x + 2)
        )
        * (b - x - 2)
        / 8
        - start
        * (-b + x + 2) ** 2
        * (b - x - 1)
        * (
            3 * d**3
            + d**2 * (5 - 9 * y)
            + d * y * (9 * y - 10)
            - 3 * y**3
            + 5 * y**2
            - 2
        )
        / 4
    )

    return output


def int15(a, b, c, d, x, y, start, end):
    output = (
        -end
        * (
            180 * a**3 * c**3 * end**6
            + 70
            * a**2
            * c**2
            * end**5
            * (a * (9 * d - 9 * y - 5) + 3 * c * (3 * b - 3 * x - 5))
            + 84
            * a
            * c
            * end**4
            * (
                a**2 * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                + a * c * (3 * b - 3 * x - 5) * (9 * d - 9 * y - 5)
                + 3
                * c**2
                * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
            )
            + 105
            * end**3
            * (
                a**3
                * (
                    3 * d**3
                    - d**2 * (9 * y + 5)
                    + d * y * (9 * y + 10)
                    - 3 * y**3
                    - 5 * y**2
                    + 2
                )
                + a**2
                * c
                * (3 * b - 3 * x - 5)
                * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                + a
                * c**2
                * (9 * d - 9 * y - 5)
                * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
                + 3 * c**3 * (-b + x + 2) ** 2 * (b - x - 1)
            )
            + 140
            * end**2
            * (
                a**2
                * (3 * b - 3 * x - 5)
                * (
                    3 * d**3
                    - d**2 * (9 * y + 5)
                    + d * y * (9 * y + 10)
                    - 3 * y**3
                    - 5 * y**2
                    + 2
                )
                + a
                * c
                * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
                + c**2 * (-b + x + 2) ** 2 * (b - x - 1) * (9 * d - 9 * y - 5)
            )
            + 210
            * end
            * (
                a
                * (3 * b - 3 * x - 4)
                * (
                    3 * d**3
                    - d**2 * (9 * y + 5)
                    + d * y * (9 * y + 10)
                    - 3 * y**3
                    - 5 * y**2
                    + 2
                )
                + c
                * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                * (b**2 - b * (2 * x + 3) + x**2 + 3 * x + 2)
            )
            * (b - x - 2)
            + 420
            * (-b + x + 2) ** 2
            * (b - x - 1)
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
        )
        / 1680
        + start
        * (
            180 * a**3 * c**3 * start**6
            + 70
            * a**2
            * c**2
            * start**5
            * (a * (9 * d - 9 * y - 5) + 3 * c * (3 * b - 3 * x - 5))
            + 84
            * a
            * c
            * start**4
            * (
                a**2 * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                + a * c * (3 * b - 3 * x - 5) * (9 * d - 9 * y - 5)
                + 3
                * c**2
                * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
            )
            + 105
            * start**3
            * (
                a**3
                * (
                    3 * d**3
                    - d**2 * (9 * y + 5)
                    + d * y * (9 * y + 10)
                    - 3 * y**3
                    - 5 * y**2
                    + 2
                )
                + a**2
                * c
                * (3 * b - 3 * x - 5)
                * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                + a
                * c**2
                * (9 * d - 9 * y - 5)
                * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
                + 3 * c**3 * (-b + x + 2) ** 2 * (b - x - 1)
            )
            + 140
            * start**2
            * (
                a**2
                * (3 * b - 3 * x - 5)
                * (
                    3 * d**3
                    - d**2 * (9 * y + 5)
                    + d * y * (9 * y + 10)
                    - 3 * y**3
                    - 5 * y**2
                    + 2
                )
                + a
                * c
                * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
                + c**2 * (-b + x + 2) ** 2 * (b - x - 1) * (9 * d - 9 * y - 5)
            )
            + 210
            * start
            * (
                a
                * (3 * b - 3 * x - 4)
                * (
                    3 * d**3
                    - d**2 * (9 * y + 5)
                    + d * y * (9 * y + 10)
                    - 3 * y**3
                    - 5 * y**2
                    + 2
                )
                + c
                * (9 * d**2 - 2 * d * (9 * y + 5) + y * (9 * y + 10))
                * (b**2 - b * (2 * x + 3) + x**2 + 3 * x + 2)
            )
            * (b - x - 2)
            + 420
            * (-b + x + 2) ** 2
            * (b - x - 1)
            * (
                3 * d**3
                - d**2 * (9 * y + 5)
                + d * y * (9 * y + 10)
                - 3 * y**3
                - 5 * y**2
                + 2
            )
        )
        / 1680
    )

    return output


def int16(a, b, c, d, x, y, start, end):
    output = (
        a**3 * c**3 * end**7 / 28
        - a**3 * c**3 * start**7 / 28
        + a**2
        * c**2
        * end**6
        * (a * (3 * d - 3 * y - 5) + c * (3 * b - 3 * x - 5))
        / 24
        - a**2
        * c**2
        * start**6
        * (a * (3 * d - 3 * y - 5) + c * (3 * b - 3 * x - 5))
        / 24
        + a
        * c
        * end**5
        * (
            a**2 * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
            + a * c * (3 * b - 3 * x - 5) * (3 * d - 3 * y - 5)
            + c**2 * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
        )
        / 20
        - a
        * c
        * start**5
        * (
            a**2 * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
            + a * c * (3 * b - 3 * x - 5) * (3 * d - 3 * y - 5)
            + c**2 * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
        )
        / 20
        + end**4
        * (
            a**3 * (-d + y + 2) ** 2 * (d - y - 1)
            + a**2
            * c
            * (3 * b - 3 * x - 5)
            * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
            + a
            * c**2
            * (3 * d - 3 * y - 5)
            * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
            + c**3 * (-b + x + 2) ** 2 * (b - x - 1)
        )
        / 16
        + end**3
        * (
            a**2 * (3 * b - 3 * x - 5) * (-d + y + 2) ** 2 * (d - y - 1)
            + a
            * c
            * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
            * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
            + c**2 * (-b + x + 2) ** 2 * (b - x - 1) * (3 * d - 3 * y - 5)
        )
        / 12
        + end**2
        * (
            a * (3 * b - 3 * x - 4) * (d**2 - d * (2 * y + 3) + y**2 + 3 * y + 2)
            + c * (3 * d - 3 * y - 4) * (b**2 - b * (2 * x + 3) + x**2 + 3 * x + 2)
        )
        * (b - x - 2)
        * (d - y - 2)
        / 8
        + end * (-b + x + 2) ** 2 * (b - x - 1) * (-d + y + 2) ** 2 * (d - y - 1) / 4
        - start**4
        * (
            a**3 * (-d + y + 2) ** 2 * (d - y - 1)
            + a**2
            * c
            * (3 * b - 3 * x - 5)
            * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
            + a
            * c**2
            * (3 * d - 3 * y - 5)
            * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
            + c**3 * (-b + x + 2) ** 2 * (b - x - 1)
        )
        / 16
        - start**3
        * (
            a**2 * (3 * b - 3 * x - 5) * (-d + y + 2) ** 2 * (d - y - 1)
            + a
            * c
            * (3 * b**2 - 2 * b * (3 * x + 5) + 3 * x**2 + 10 * x + 8)
            * (3 * d**2 - 2 * d * (3 * y + 5) + 3 * y**2 + 10 * y + 8)
            + c**2 * (-b + x + 2) ** 2 * (b - x - 1) * (3 * d - 3 * y - 5)
        )
        / 12
        - start**2
        * (
            a * (3 * b - 3 * x - 4) * (d**2 - d * (2 * y + 3) + y**2 + 3 * y + 2)
            + c * (3 * d - 3 * y - 4) * (b**2 - b * (2 * x + 3) + x**2 + 3 * x + 2)
        )
        * (b - x - 2)
        * (d - y - 2)
        / 8
        - start * (-b + x + 2) ** 2 * (b - x - 1) * (-d + y + 2) ** 2 * (d - y - 1) / 4
    )

    return output
